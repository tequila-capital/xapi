# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import market_data_pb2 as market__data__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in market_data_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MarketDataServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDailyWeeklyMonthlyBars = channel.unary_unary(
                '/MarketDataService/GetDailyWeeklyMonthlyBars',
                request_serializer=market__data__pb2.DailyWeeklyMonthlyBarsRequest.SerializeToString,
                response_deserializer=market__data__pb2.DailyWeeklyMonthlyBarsResponse.FromString,
                _registered_method=True)
        self.GetIntradayBars = channel.unary_unary(
                '/MarketDataService/GetIntradayBars',
                request_serializer=market__data__pb2.IntradayBarsRequest.SerializeToString,
                response_deserializer=market__data__pb2.IntradayBarsResponse.FromString,
                _registered_method=True)
        self.GetOptionChainForUnderlier = channel.unary_unary(
                '/MarketDataService/GetOptionChainForUnderlier',
                request_serializer=market__data__pb2.OptionChainRequest.SerializeToString,
                response_deserializer=market__data__pb2.OptionChainResponse.FromString,
                _registered_method=True)
        self.GetSymbolReferenceData = channel.unary_unary(
                '/MarketDataService/GetSymbolReferenceData',
                request_serializer=market__data__pb2.SymbolReferenceDataRequest.SerializeToString,
                response_deserializer=market__data__pb2.SymbolReferenceDataResponse.FromString,
                _registered_method=True)
        self.GetTickData = channel.unary_unary(
                '/MarketDataService/GetTickData',
                request_serializer=market__data__pb2.TickDataRequest.SerializeToString,
                response_deserializer=market__data__pb2.TickDataResponse.FromString,
                _registered_method=True)
        self.GetOptionsAndGreekData = channel.unary_unary(
                '/MarketDataService/GetOptionsAndGreekData',
                request_serializer=market__data__pb2.OptionsAndGreekDataRequest.SerializeToString,
                response_deserializer=market__data__pb2.OptionsAndGreekDataResponse.FromString,
                _registered_method=True)
        self.GetSecurityData = channel.unary_unary(
                '/MarketDataService/GetSecurityData',
                request_serializer=market__data__pb2.SecurityDataRequest.SerializeToString,
                response_deserializer=market__data__pb2.SecurityDataResponse.FromString,
                _registered_method=True)
        self.GetOptionSymbolFromDescription = channel.unary_unary(
                '/MarketDataService/GetOptionSymbolFromDescription',
                request_serializer=market__data__pb2.OptionSymbolFromDescriptionRequest.SerializeToString,
                response_deserializer=market__data__pb2.OptionSymbolFromDescriptionResponse.FromString,
                _registered_method=True)
        self.GetDescriptionFromOptionSymbol = channel.unary_unary(
                '/MarketDataService/GetDescriptionFromOptionSymbol',
                request_serializer=market__data__pb2.DescriptionFromOptionSymbolRequest.SerializeToString,
                response_deserializer=market__data__pb2.DescriptionFromOptionSymbolResponse.FromString,
                _registered_method=True)
        self.SubscribeLevel1Ticks = channel.unary_stream(
                '/MarketDataService/SubscribeLevel1Ticks',
                request_serializer=market__data__pb2.Level1MarketDataRequest.SerializeToString,
                response_deserializer=market__data__pb2.Level1MarketDataResponse.FromString,
                _registered_method=True)
        self.UnSubscribeLevel1Data = channel.unary_unary(
                '/MarketDataService/UnSubscribeLevel1Data',
                request_serializer=market__data__pb2.UnSubscribeLevel1DataRequest.SerializeToString,
                response_deserializer=market__data__pb2.UnSubscribeLevel1DataResponse.FromString,
                _registered_method=True)
        self.SubscribeLevel2Ticks = channel.unary_stream(
                '/MarketDataService/SubscribeLevel2Ticks',
                request_serializer=market__data__pb2.Level2MarketDataRequest.SerializeToString,
                response_deserializer=market__data__pb2.Level2MarketDataResponse.FromString,
                _registered_method=True)
        self.UnSubscribeLevel2Data = channel.unary_unary(
                '/MarketDataService/UnSubscribeLevel2Data',
                request_serializer=market__data__pb2.UnSubscribeLevel2DataRequest.SerializeToString,
                response_deserializer=market__data__pb2.UnSubscribeLevel2DataResponse.FromString,
                _registered_method=True)
        self.AddSymbols = channel.unary_unary(
                '/MarketDataService/AddSymbols',
                request_serializer=market__data__pb2.AddSymbolsRequest.SerializeToString,
                response_deserializer=market__data__pb2.AddSymbolsResponse.FromString,
                _registered_method=True)
        self.RemoveSymbols = channel.unary_unary(
                '/MarketDataService/RemoveSymbols',
                request_serializer=market__data__pb2.RemoveSymbolsRequest.SerializeToString,
                response_deserializer=market__data__pb2.RemoveSymbolsResponse.FromString,
                _registered_method=True)
        self.GetSymbolsFromCompanyName = channel.unary_unary(
                '/MarketDataService/GetSymbolsFromCompanyName',
                request_serializer=market__data__pb2.SymbolsFromCompanyNameRequest.SerializeToString,
                response_deserializer=market__data__pb2.SymbolsFromCompanyNameResponse.FromString,
                _registered_method=True)
        self.GetSymbolFromAlternateSymbology = channel.unary_unary(
                '/MarketDataService/GetSymbolFromAlternateSymbology',
                request_serializer=market__data__pb2.SymbolFromAlternateSymbologyRequest.SerializeToString,
                response_deserializer=market__data__pb2.SymbolFromAlternateSymbologyResponse.FromString,
                _registered_method=True)
        self.GetLevel1MarketData = channel.unary_unary(
                '/MarketDataService/GetLevel1MarketData',
                request_serializer=market__data__pb2.Level1MarketDataRecordRequest.SerializeToString,
                response_deserializer=market__data__pb2.Level1MarketDataRecordResponse.FromString,
                _registered_method=True)
        self.SubscribeTickData = channel.unary_stream(
                '/MarketDataService/SubscribeTickData',
                request_serializer=market__data__pb2.SubscribeTickDataRequest.SerializeToString,
                response_deserializer=market__data__pb2.SubscribeTickDataResponse.FromString,
                _registered_method=True)
        self.UnSubscribeTickData = channel.unary_unary(
                '/MarketDataService/UnSubscribeTickData',
                request_serializer=market__data__pb2.UnSubscribeTickDataRequest.SerializeToString,
                response_deserializer=market__data__pb2.UnSubscribeTickDataResponse.FromString,
                _registered_method=True)


class MarketDataServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetDailyWeeklyMonthlyBars(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIntradayBars(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOptionChainForUnderlier(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSymbolReferenceData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTickData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOptionsAndGreekData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSecurityData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOptionSymbolFromDescription(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDescriptionFromOptionSymbol(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeLevel1Ticks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnSubscribeLevel1Data(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeLevel2Ticks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnSubscribeLevel2Data(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddSymbols(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveSymbols(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSymbolsFromCompanyName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSymbolFromAlternateSymbology(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLevel1MarketData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeTickData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnSubscribeTickData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MarketDataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDailyWeeklyMonthlyBars': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDailyWeeklyMonthlyBars,
                    request_deserializer=market__data__pb2.DailyWeeklyMonthlyBarsRequest.FromString,
                    response_serializer=market__data__pb2.DailyWeeklyMonthlyBarsResponse.SerializeToString,
            ),
            'GetIntradayBars': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIntradayBars,
                    request_deserializer=market__data__pb2.IntradayBarsRequest.FromString,
                    response_serializer=market__data__pb2.IntradayBarsResponse.SerializeToString,
            ),
            'GetOptionChainForUnderlier': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOptionChainForUnderlier,
                    request_deserializer=market__data__pb2.OptionChainRequest.FromString,
                    response_serializer=market__data__pb2.OptionChainResponse.SerializeToString,
            ),
            'GetSymbolReferenceData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSymbolReferenceData,
                    request_deserializer=market__data__pb2.SymbolReferenceDataRequest.FromString,
                    response_serializer=market__data__pb2.SymbolReferenceDataResponse.SerializeToString,
            ),
            'GetTickData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTickData,
                    request_deserializer=market__data__pb2.TickDataRequest.FromString,
                    response_serializer=market__data__pb2.TickDataResponse.SerializeToString,
            ),
            'GetOptionsAndGreekData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOptionsAndGreekData,
                    request_deserializer=market__data__pb2.OptionsAndGreekDataRequest.FromString,
                    response_serializer=market__data__pb2.OptionsAndGreekDataResponse.SerializeToString,
            ),
            'GetSecurityData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSecurityData,
                    request_deserializer=market__data__pb2.SecurityDataRequest.FromString,
                    response_serializer=market__data__pb2.SecurityDataResponse.SerializeToString,
            ),
            'GetOptionSymbolFromDescription': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOptionSymbolFromDescription,
                    request_deserializer=market__data__pb2.OptionSymbolFromDescriptionRequest.FromString,
                    response_serializer=market__data__pb2.OptionSymbolFromDescriptionResponse.SerializeToString,
            ),
            'GetDescriptionFromOptionSymbol': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDescriptionFromOptionSymbol,
                    request_deserializer=market__data__pb2.DescriptionFromOptionSymbolRequest.FromString,
                    response_serializer=market__data__pb2.DescriptionFromOptionSymbolResponse.SerializeToString,
            ),
            'SubscribeLevel1Ticks': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeLevel1Ticks,
                    request_deserializer=market__data__pb2.Level1MarketDataRequest.FromString,
                    response_serializer=market__data__pb2.Level1MarketDataResponse.SerializeToString,
            ),
            'UnSubscribeLevel1Data': grpc.unary_unary_rpc_method_handler(
                    servicer.UnSubscribeLevel1Data,
                    request_deserializer=market__data__pb2.UnSubscribeLevel1DataRequest.FromString,
                    response_serializer=market__data__pb2.UnSubscribeLevel1DataResponse.SerializeToString,
            ),
            'SubscribeLevel2Ticks': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeLevel2Ticks,
                    request_deserializer=market__data__pb2.Level2MarketDataRequest.FromString,
                    response_serializer=market__data__pb2.Level2MarketDataResponse.SerializeToString,
            ),
            'UnSubscribeLevel2Data': grpc.unary_unary_rpc_method_handler(
                    servicer.UnSubscribeLevel2Data,
                    request_deserializer=market__data__pb2.UnSubscribeLevel2DataRequest.FromString,
                    response_serializer=market__data__pb2.UnSubscribeLevel2DataResponse.SerializeToString,
            ),
            'AddSymbols': grpc.unary_unary_rpc_method_handler(
                    servicer.AddSymbols,
                    request_deserializer=market__data__pb2.AddSymbolsRequest.FromString,
                    response_serializer=market__data__pb2.AddSymbolsResponse.SerializeToString,
            ),
            'RemoveSymbols': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveSymbols,
                    request_deserializer=market__data__pb2.RemoveSymbolsRequest.FromString,
                    response_serializer=market__data__pb2.RemoveSymbolsResponse.SerializeToString,
            ),
            'GetSymbolsFromCompanyName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSymbolsFromCompanyName,
                    request_deserializer=market__data__pb2.SymbolsFromCompanyNameRequest.FromString,
                    response_serializer=market__data__pb2.SymbolsFromCompanyNameResponse.SerializeToString,
            ),
            'GetSymbolFromAlternateSymbology': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSymbolFromAlternateSymbology,
                    request_deserializer=market__data__pb2.SymbolFromAlternateSymbologyRequest.FromString,
                    response_serializer=market__data__pb2.SymbolFromAlternateSymbologyResponse.SerializeToString,
            ),
            'GetLevel1MarketData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLevel1MarketData,
                    request_deserializer=market__data__pb2.Level1MarketDataRecordRequest.FromString,
                    response_serializer=market__data__pb2.Level1MarketDataRecordResponse.SerializeToString,
            ),
            'SubscribeTickData': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeTickData,
                    request_deserializer=market__data__pb2.SubscribeTickDataRequest.FromString,
                    response_serializer=market__data__pb2.SubscribeTickDataResponse.SerializeToString,
            ),
            'UnSubscribeTickData': grpc.unary_unary_rpc_method_handler(
                    servicer.UnSubscribeTickData,
                    request_deserializer=market__data__pb2.UnSubscribeTickDataRequest.FromString,
                    response_serializer=market__data__pb2.UnSubscribeTickDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MarketDataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('MarketDataService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MarketDataService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetDailyWeeklyMonthlyBars(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MarketDataService/GetDailyWeeklyMonthlyBars',
            market__data__pb2.DailyWeeklyMonthlyBarsRequest.SerializeToString,
            market__data__pb2.DailyWeeklyMonthlyBarsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetIntradayBars(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MarketDataService/GetIntradayBars',
            market__data__pb2.IntradayBarsRequest.SerializeToString,
            market__data__pb2.IntradayBarsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOptionChainForUnderlier(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MarketDataService/GetOptionChainForUnderlier',
            market__data__pb2.OptionChainRequest.SerializeToString,
            market__data__pb2.OptionChainResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSymbolReferenceData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MarketDataService/GetSymbolReferenceData',
            market__data__pb2.SymbolReferenceDataRequest.SerializeToString,
            market__data__pb2.SymbolReferenceDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTickData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MarketDataService/GetTickData',
            market__data__pb2.TickDataRequest.SerializeToString,
            market__data__pb2.TickDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOptionsAndGreekData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MarketDataService/GetOptionsAndGreekData',
            market__data__pb2.OptionsAndGreekDataRequest.SerializeToString,
            market__data__pb2.OptionsAndGreekDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSecurityData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MarketDataService/GetSecurityData',
            market__data__pb2.SecurityDataRequest.SerializeToString,
            market__data__pb2.SecurityDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOptionSymbolFromDescription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MarketDataService/GetOptionSymbolFromDescription',
            market__data__pb2.OptionSymbolFromDescriptionRequest.SerializeToString,
            market__data__pb2.OptionSymbolFromDescriptionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDescriptionFromOptionSymbol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MarketDataService/GetDescriptionFromOptionSymbol',
            market__data__pb2.DescriptionFromOptionSymbolRequest.SerializeToString,
            market__data__pb2.DescriptionFromOptionSymbolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeLevel1Ticks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/MarketDataService/SubscribeLevel1Ticks',
            market__data__pb2.Level1MarketDataRequest.SerializeToString,
            market__data__pb2.Level1MarketDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnSubscribeLevel1Data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MarketDataService/UnSubscribeLevel1Data',
            market__data__pb2.UnSubscribeLevel1DataRequest.SerializeToString,
            market__data__pb2.UnSubscribeLevel1DataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeLevel2Ticks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/MarketDataService/SubscribeLevel2Ticks',
            market__data__pb2.Level2MarketDataRequest.SerializeToString,
            market__data__pb2.Level2MarketDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnSubscribeLevel2Data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MarketDataService/UnSubscribeLevel2Data',
            market__data__pb2.UnSubscribeLevel2DataRequest.SerializeToString,
            market__data__pb2.UnSubscribeLevel2DataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddSymbols(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MarketDataService/AddSymbols',
            market__data__pb2.AddSymbolsRequest.SerializeToString,
            market__data__pb2.AddSymbolsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveSymbols(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MarketDataService/RemoveSymbols',
            market__data__pb2.RemoveSymbolsRequest.SerializeToString,
            market__data__pb2.RemoveSymbolsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSymbolsFromCompanyName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MarketDataService/GetSymbolsFromCompanyName',
            market__data__pb2.SymbolsFromCompanyNameRequest.SerializeToString,
            market__data__pb2.SymbolsFromCompanyNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSymbolFromAlternateSymbology(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MarketDataService/GetSymbolFromAlternateSymbology',
            market__data__pb2.SymbolFromAlternateSymbologyRequest.SerializeToString,
            market__data__pb2.SymbolFromAlternateSymbologyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLevel1MarketData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MarketDataService/GetLevel1MarketData',
            market__data__pb2.Level1MarketDataRecordRequest.SerializeToString,
            market__data__pb2.Level1MarketDataRecordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeTickData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/MarketDataService/SubscribeTickData',
            market__data__pb2.SubscribeTickDataRequest.SerializeToString,
            market__data__pb2.SubscribeTickDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnSubscribeTickData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MarketDataService/UnSubscribeTickData',
            market__data__pb2.UnSubscribeTickDataRequest.SerializeToString,
            market__data__pb2.UnSubscribeTickDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
